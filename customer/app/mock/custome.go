// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/core/port/driven/customer_port_driven.go

// Package mock is a generated GoMock package.
package mock

import (
	domain "customer/internal/core/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockCustomerPortDriven is a mock of CustomerPortDriven interface.
type MockCustomerPortDriven struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerPortDrivenMockRecorder
}

// MockCustomerPortDrivenMockRecorder is the mock recorder for MockCustomerPortDriven.
type MockCustomerPortDrivenMockRecorder struct {
	mock *MockCustomerPortDriven
}

// NewMockCustomerPortDriven creates a new mock instance.
func NewMockCustomerPortDriven(ctrl *gomock.Controller) *MockCustomerPortDriven {
	mock := &MockCustomerPortDriven{ctrl: ctrl}
	mock.recorder = &MockCustomerPortDrivenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerPortDriven) EXPECT() *MockCustomerPortDrivenMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCustomerPortDriven) Create(arg0 domain.Customer) (domain.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(domain.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCustomerPortDrivenMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCustomerPortDriven)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockCustomerPortDriven) Delete(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCustomerPortDrivenMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCustomerPortDriven)(nil).Delete), id)
}

// GetByEmail mocks base method.
func (m *MockCustomerPortDriven) GetByEmail(email string) (domain.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", email)
	ret0, _ := ret[0].(domain.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockCustomerPortDrivenMockRecorder) GetByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockCustomerPortDriven)(nil).GetByEmail), email)
}

// GetByID mocks base method.
func (m *MockCustomerPortDriven) GetByID(id uuid.UUID) (domain.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(domain.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCustomerPortDrivenMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCustomerPortDriven)(nil).GetByID), id)
}

// Index mocks base method.
func (m *MockCustomerPortDriven) Index() []domain.Customer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index")
	ret0, _ := ret[0].([]domain.Customer)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockCustomerPortDrivenMockRecorder) Index() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockCustomerPortDriven)(nil).Index))
}

// Update mocks base method.
func (m *MockCustomerPortDriven) Update(arg0 domain.Customer) (domain.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(domain.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCustomerPortDrivenMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCustomerPortDriven)(nil).Update), arg0)
}

// UpdateEmail mocks base method.
func (m *MockCustomerPortDriven) UpdateEmail(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmail indicates an expected call of UpdateEmail.
func (mr *MockCustomerPortDrivenMockRecorder) UpdateEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmail", reflect.TypeOf((*MockCustomerPortDriven)(nil).UpdateEmail), arg0)
}

// UpdatePassword mocks base method.
func (m *MockCustomerPortDriven) UpdatePassword(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockCustomerPortDrivenMockRecorder) UpdatePassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockCustomerPortDriven)(nil).UpdatePassword), arg0)
}

// UpdatePhone mocks base method.
func (m *MockCustomerPortDriven) UpdatePhone(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhone", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePhone indicates an expected call of UpdatePhone.
func (mr *MockCustomerPortDrivenMockRecorder) UpdatePhone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhone", reflect.TypeOf((*MockCustomerPortDriven)(nil).UpdatePhone), arg0)
}
